//===== rAthena Script =======================================
//= Yuchinin Common Library
//===== By: ==================================================
//= Yuchinin
//===== Current Version: =====================================
//= 2.4.1
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= A common useful function I wrote to make my life easier.
//= Most of my release script will need this to work
//=====******** Note ********=================================
//= This will be the core of my other script.
//= Better let it load first before adding my other script.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.1 Change function arrdel from using 'value' to 'index'
//= 1.2 Fixed sql query bug
//= 1.3 Added Url, npcmes
//= 1.4 Added strcharinfo2 to avoid offline player return empty
//= 	String
//= 1.4a Fixed arrdel
//= 1.4b Fixed arrfind
//= 1.4c Add arrdel, arrfind notsensitive bool
//= 1.5 Add answer_chk to check input value from define value
//= 1.5a Optimize npcindistance
//= 1.5b Try to fix npcindistance
//= 1.6 Added marketshopcountitem, marketshopdelitem
//= 1.7 Added itemcheck, varcheck
//= 1.8 Added itemname
//= 1.9 Revamped itemcheck and varcheck
//= 1.9a Comment out the debugmes of function arradd
//= 2.0 Added running Marquee
//= 2.1 Added function itemtype to return item type in string
//= 2.2 Added getcharid2 to counter getcharid which need attached
//= 2.3 Added arrfind_db and arrget_db
//= 2.3 Added elementname2id and elementid2name
//= 2.3a Added sortstringarray
//= 2.3b Added FAKE_EFFECT npc 
//= 2.4 Added itembreak (Use in Item Hunting Game)
//= 2.4.1 Added explosion (Use in Cannon game)
//============================================================

-	script	CommonInitialize	-1,{
OnInit:
	delmonsterdrop 1792,18503;
	delmonsterdrop 1792,18503;
	delmonsterdrop 1792,12326;
	delmonsterdrop 1792,603;
	delmonsterdrop 1792,617;
}

function	script	abs	{
	.@val = getarg(0);
	if(.@val<0) .@val *= -1;
	return .@val;
}

function	script	monster_fall	{
	.@map$ = getarg(0);
	.@mapx = getarg(1);
	.@mapy = getarg(2);
	.@mobid = getarg(3,1002);
	.@radius = getarg(4,0);
	if(.@radius>2) .@radius = 2;
	if(getmonsterinfo(.@mobid,MOB_NAME)=="null") .@mobid = 1002;
	for(.@i=.@mapx-.@radius;.@i<=.@mapx+.@radius;.@i++){
		for(.@j=.@mapy-.@radius;.@j<=.@mapy+.@radius;.@j++){
			if( checkcell(.@map$,.@i,.@j,cell_chkpass) ){
				.@gid = monster(.@map$,.@i,.@j,"Bomb",.@mobid,1);
				unitkill .@gid;
			}
		}
	}
	return;
}

function	script	monster_bomb	{
	.@map$ = getarg(0);
	.@mapx = getarg(1);
	.@mapy = getarg(2);
	.@power = getarg(3,100);
	.@mobid = getarg(4,1792);
	.@radius = getarg(5,0);
	if(.@radius>2) .@radius = 2;
	if(getmonsterinfo(.@mobid,MOB_NAME)=="null") .@mobid = 1792;
	for(.@i=.@mapx-.@radius;.@i<=.@mapx+.@radius;.@i++){
		for(.@j=.@mapy-.@radius;.@j<=.@mapy+.@radius;.@j++){
			if( checkcell(.@map$,.@i,.@j,cell_chkpass) ){
				.@gid = monster(.@map$,.@i,.@j,"Bomb",.@mobid,1);
				if(.@power>0) setunitdata .@gid,UMOB_MAXHP,.@power;
				unitskilluseid .@gid,173,1,.@gid,-99;
			}
		}
	}
	return;
}

function	script	explosion	{
	.@map$ = getarg(0);
	.@mapx = getarg(1);
	.@mapy = getarg(2);
	.@power = getarg(3,100);
	if( !checkcell(.@map$,.@mapx,.@mapy,cell_chkpass) ) return;
	setnpcdisplay("FAKE_EFFECT",139);
	unitwarp getnpcid(0,"FAKE_EFFECT"),.@map$,.@mapx,.@mapy;
	setunitdata getnpcid(0,"FAKE_EFFECT"),UNPC_MAXHP,.@power;
	unitskilluseid getnpcid(0,"FAKE_EFFECT"),173,1,getnpcid(0,"FAKE_EFFECT"),-99;
	return;
}

function	script	tempeffect	{
	.@ef = getarg(0);
	.@m$ = getarg(1);
	.@mx = getarg(2);
	.@my = getarg(3);
	//dispbottom "tempeffect: Try to show effect "+.@ef+" at "+.@m$+","+.@mx+","+.@my;
	//if( !checkcell(.@m$,.@mx,.@my,cell_chkpass) ) return;
	setnpcdisplay("FAKE_EFFECT",139);
	unitwarp getnpcid(0,"FAKE_EFFECT"),.@m$,.@mx,.@my;
	callfunc("setVariable",".effect",.@ef,"FAKE_EFFECT");
	donpcevent "FAKE_EFFECT::OnEffect";
	return;
}

function	script	tempsoundeffect	{
	.@ef$ = getarg(0);
	.@m$ = getarg(1);
	.@mx = getarg(2);
	.@my = getarg(3);
	//dispbottom "tempeffect: Try to show effect "+.@ef+" at "+.@m$+","+.@mx+","+.@my;
	if( !checkcell(.@m$,.@mx,.@my,cell_chkpass) ) return;
	setnpcdisplay("FAKE_SOUND",139);
	unitwarp getnpcid(0,"FAKE_SOUND"),.@m$,.@mx,.@my;
	callfunc("setVariable",".effect$",.@ef$,"FAKE_SOUND");
	donpcevent "FAKE_SOUND::OnEffect";
	return;
}

prt_fild08,123,317,4	script	FAKE_EFFECT	139,{
end;
OnEffect:
   if(.effect) specialeffect(.effect);
}

prt_fild08,123,317,4	script	FAKE_SOUND	139,{
end;
OnEffect:
   if(.effect$!="") soundeffectall .effect$,0;
}

function	script	elementid2name	{
	setarray .@elementlist$,"Neutral","Water","Earth","Fire","Wind","Poison","Holy","Dark","Ghost","Undead";
	return .@elementlist$[getarg(0)];
}

function	script	elementname2id	{
	setarray .@elementlist$,"Neutral","Water","Earth","Fire","Wind","Poison","Holy","Dark","Ghost","Undead";
	for(.@x=0;.@x<getarraysize(.@elementlist$);.@x++){
		if(.@elementlist$[.@x]==getarg(0)) return .@x;
	}
	return -1;
}

function	script	arrfind_db	{
	.@arrname$ = getarg(0);
	.@arrfind$ = getarg(1);
	for(.@x=0;.@x<getarraysize(getd(.@arrname$));.@x++){
		explode(.@T$,getd(.@arrname$+"["+.@x+"]"),"|");
		if(.@T$[0]==.@arrfind$) return .@x;
	}
	return -1;
}

function	script	arrget_db	{
	.@arrname$ = getarg(0);
	.@index1 = getarg(1);
	.@index2 = getarg(2);
	explode(.@T$,getd(.@arrname$+"["+.@index1+"]"),"|");
	return .@T$[.@index2];
}

//=========================================
//= Marquee(<"string">,{<delay>})
//=========================================
function	script	Marquee	{
	.@str$ = "              "+getarg(0);
	.@delay = getarg(1,100);
	do{
		.@str$ = delchar(.@str$,0);
		delwaitingroom;
		waitingroom .@str$,0;
		sleep .@delay;
	}while(getstrlen(.@str$));
	return;
}

//=========================================
//= CStr(<"string to change color">,{<"color name">})
//= return string with selected color
//=========================================
function	script	CStr	{
setarray .color_str$,"BLACK","RED","GREEN","BLUE","YELLOW","TEAL","PURPLE","GRAY","WHITE","BROWN","SILVER","GOLD","MITHRIL","NEUTRAL","WATER","EARTH","FIRE","WIND";
setarray .color_code$,"000000","FF0000","04B404","0000FF","FFFF00","00FFFF","FF00FF","C0C0C0","FFFFFF","996600","999999","FFCC00","CCCCCC","777777","0000BB","cc5500","FF0000","7BCC70";
.@color_in$ = getarg(1,"BLACK");
.@str$ = getarg(0,"null");
for(.@x=0; .@x < getarraysize(.color_str$); .@x++){
	if(strtoupper(.@color_in$) == .color_str$[.@x]){
		.@color$ = .color_code$[.@x];
		break;
	}
}
if(.@color$ == "") .@color$ = .color_code$[0];	// default to black if color not found in array
return "^"+.@color$+.@str$+"^000000";
}

//=========================================
//= CZeny(<zeny>,{<"delimiter">,<"symbol">})
//= return ease look zeny string
//=========================================
function	script	CZeny	{
	.@number$  = getarg(0);
	.@delimiter$ = getarg(1,",");
	.@symbol$ = getarg(2,"z");
	.@length   = getstrlen(.@number$);
	.@numberSeparated$ = "";
	if ("" != .@number$ &&  3 < .@length) {
		while (.@length > 3) {
			.@numberSeparated$ = ("" != .@numberSeparated$) ? substr(.@number$, .@length - 3, .@length - 1) + .@delimiter$ + .@numberSeparated$ : substr(.@number$, .@length - 3, .@length - 1);
			.@length = .@length - 3;
		}
		.@numberSeparated$ = substr(.@number$, 0,  .@length - 1) + .@delimiter$ + .@numberSeparated$;
	}
	return ((.@numberSeparated$ != "") ? .@numberSeparated$ : .@number$)+.@symbol$;
}

function	script	findinventoryitem	{
	getinventorylist;
	for(.@x=0;.@x<inventorylist_count;.@x++){
		if(getarg(0)==@inventorylist_id[.@x]) return .@x;
	}
	return -1;
}

// int getmarketvar(int itemid, string var, string marketname)
function	script	getmarketvar	{
	.@marketname$ = getarg(2);
	.@sql$ = "select "+getarg(1)+" from market where name = '"+.@marketname$+"' AND nameid = "+getarg(0);
	//debugmes .@sql$;
	.@count = query_sql(.@sql$,.@val);
	if(.@count <= 0) return 0;
	//debugmes getitemname(getarg(0))+": "+getarg(0)+" = "+.@val;
	return .@val;
}

//===================================
//=	marketshopcountitem(<itemid>,"<marketname>")
//=	return item amount of the market npc
//===================================
function	script	marketshopcountitem	{
	.@sql$ = "select amount from market where nameid = "+getarg(0)+" AND name = '"+getarg(1)+"'";
	.@size = query_sql(.@sql$,.@amt);
	if(.@size <= 0){
		debugmes "marketshopcountitem: .@sql$ "+.@sql$;
		debugmes "marketshopcountitem: item id "+getarg(0)+" or market named "+getarg(1)+" not found!";
		return 0;
	}
	if(.@amt > 0) return .@amt;
	return 0;
}

//===================================
//=	marketshopcountitem2(<itemid>,"<townname>")
//=	return item amount of the town market npc
//===================================
function	script	marketshopcountitem2	{
	return marketshopcountitem(getarg(0),getarg(1)+"#"+getiteminfo(getarg(0),2));
}

//===================================
//=	marketshopadditem(<itemid>,<amount>,"<marketname>"{,price})
//===================================
function	script	marketshopadditem	{
	.@id = getarg(0);
	.@amt = getarg(1);
	.@market$ = getarg(2);
	.@price = getarg(3,0);
	.@amtfound = marketshopcountitem(.@id,.@market$);
	if(.@amtfound){
		npcshopupdate .@market$,.@id,.@price,.@amt+.@amtfound;
		showscript "Add "+.@amt+" x "+getitemname(.@id)+" = "+(.@amt+.@amtfound),getnpcid(0);
	}else{
		npcshopadditem .@market$,.@id,.@price,.@amt;
		showscript "Create "+.@amt+" x "+getitemname(.@id),getnpcid(0);
	}
	return;
}

//===================================
//=	marketshopadditem2(<itemid>,<amount>,"<town>"{,price})
//===================================
function	script	marketshopadditem2	{
	.@id = getarg(0);
	.@amt = getarg(1);
	.@market$ = getarg(2);
	.@price = getarg(3,0);
	marketshopadditem(.@id,.@amt,.@market$+"#"+getiteminfo(.@id,2),.@price);
	return;
}

//===================================
//=	marketshopdelitem(<itemid>,<amount>,"<marketname>")
//=	return 1 on success
//= return 0 on error
//===================================
function	script	marketshopdelitem	{
	.@sql$ = "select amount from market where nameid = "+getarg(0)+" AND name = '"+getarg(2)+"'";
	.@size = query_sql(.@sql$,.@amt);
	if(.@size <= 0){
		debugmes "marketshopdelitem: .@sql$ "+.@sql$;
		debugmes "marketshopdelitem: item id "+getarg(0)+" or market named "+getarg(2)+" not found!";
		return 0;
	}
	.@amt = marketshopcountitem(getarg(0),getarg(2));
	if(getarg(1) >= .@amt){
		npcshopdelitem(getarg(2),getarg(0));
	}else{
		npcshopupdate getarg(2),getarg(0),0,.@amt-getarg(1);
	}
	return 1;
}

//===================================
//=	marketshopclear("<marketname>")
//=	clear all item on marketshop
//===================================
function	script	marketshopclear	{
	.@sql$ = "select nameid from market where name = '"+getarg(0)+"'";
	.@size = query_sql(.@sql$,.@nameid);
	if(.@size <= 0){
		debugmes "marketshopclear: market named "+getarg(0)+" is empty. Nothing to clear.";
		return 0;
	}
	for(.@x=0;.@x<.@size;.@x++){
		npcshopupdate getarg(0),.@nameid[.@x],0,0;
	}
	showscript "Market Cleared",getnpcid(0);
	return;
}

//===================================
//=	getcharid2(<mode>,"<charname>")
//= work also on offline character
//= to counter getcharid
//= mode:
//= 0 - Character ID
//= 1 - Party ID
//= 2 - Guild ID
//= 3 - Account ID
//= 4 - Clan ID
//===================================
function	script	getcharid2	{
	.@size = query_sql("select char_id, party_id, guild_id, account_id, clan_id from `char` where name = '"+getarg(1)+"'",.@charid,.@pid,.@gid,.@aid,.@cid);
	if(.@size < 0) return 0;
	if(getarg(0)==0) return .@charid;
	else if(getarg(0)==1) return .@pid;
	else if(getarg(0)==2) return .@gid;
	else if(getarg(0)==3) return .@aid;
	else if(getarg(0)==4) return .@cid;
	return 0;
}

//===================================
//=	strcharinfo2(<mode>,<charid>)
//= work also on offline character
//= to counter strcharinfo
//= mode:
//=	0 = return char name
//=	1 = return party name
//=	2 = return guild name
//===================================
function	script	strcharinfo2	{
	.@size = query_sql("select name, party_id, guild_id from `char` where char_id = "+getarg(1),.@n$,.@p,.@g);
	if(.@size < 0) return "";
	if(getarg(0)==0) return .@n$;
	else if(getarg(0)==1){
		return getpartyname(.@p);
	}else if(getarg(0)==2){
		return getguildname(.@g);
	}
	return "";
}

//===================================
//=	unitwalkauto(<unitid>,<x>,<y>)
//= walk character in npc <distance>
//===================================
function	script	unitwalkauto	{
	@rid = getarg(0,getcharid(3));
	@x = getarg(1);
	@y = getarg(2);
	getmapxy(.@m$,.@x,.@y,0);
	if(!checkcell( .@m$,@x,@y,cell_chkpass )){
		//dispbottom "Coordinate not exists!";
		return;
	}
	@auto_walk = 1;
	viewpoint 1,@x,@y,1,0xFF0000;
	do{
		//dispbottom "auto walking to x = "+@x+" y = "+@y;
		unitwalk @rid,@x,@y,strnpcinfo(3)+"::OnReach";
		sleep2 1500;
	}while(@auto_walk);
	dispbottom "stop auto walking...";
	return;
}

//===================================
//=	walktonpc({<unitid>,<distance>})
//= walk character in npc <distance>
//===================================
function	script	walktonpc	{
	.@rid = getarg(0,getcharid(3));
	.@distance = getarg(1,1);
	getmapxy(.@mc$,.@xc,.@yc,0);
	getmapxy(.@mn$,.@xn,.@yn,1);
	if(.@xc > .@xn) .@xx = .@xn + .@distance;
	else if(.@xc < .@xn) .@xx = .@xn - .@distance;
	else .@xx = .@xn;
	if(.@yc > .@yn) .@yy = .@yn + .@distance;
	else if(.@yc < .@yn) .@yy = .@yn - .@distance;
	else .@yy = .@yn;
	unitwalk .@rid,.@xx,.@yy;
	return;
}

//===================================
//=	npcindistance(<distance>)
//= check if distance with npc smaller or equal to <distance>
//= return to the caller
//= else walk in npc <distance> 
//===================================
function	script	npcindistance	{
	.@distance = getarg(0,1);
	getmapxy(.@mc$,.@xc,.@yc,0);
	getmapxy(.@mn$,.@xn,.@yn,1);
	.@d = distance(.@xc,.@yc,.@xn,.@yn);
	//debugmes "distance = "+.@d;
	while(.@d > .@distance){
		walktonpc(getcharid(3),.@distance);
		sleep2 1000;
		getmapxy(.@mc$,.@xc,.@yc,0);
		getmapxy(.@mn$,.@xn,.@yn,1);
		.@d = distance(.@xc,.@yc,.@xn,.@yn);
	};
	return;
}

function	script	display	{
	.@str$ = getarg(0,"");
	delwaitingroom strnpcinfo(3);
	if(.@str$!="") waitingroom .@str$,0,strnpcinfo(3);
	return;
}

//===================================
//=	getVariable(<"npc variable name">,{"<owner>"})
//= return variable value
//= owner will be calling npc if omitted
//===================================
function	script	getVariable	{
	return getvariableofnpc(getd(getarg(0)),getarg(1,strnpcinfo(3)));
}

//===================================
//=	setVariable(<"npc variable name">,<val>,{<"owner">})
//= set variable value
//= owner will be calling npc if omitted
//===================================
function	script	setVariable	{
	set getvariableofnpc(getd(getarg(0)),getarg(2,strnpcinfo(3))),getarg(1);
	return;
}

//===================================
//=	arradd("<arrayname>",<value>,{<"owner">})
//= add value to array
//= owner will be calling npc if omitted
//===================================
function	script	arradd	{
	.@size = getarraysize(getVariable(getarg(0),getarg(2,strnpcinfo(3))));
	//debugmes ".@size = "+.@size;
	setVariable(getarg(0)+"["+.@size+"]",getarg(1),getarg(2,strnpcinfo(3)));
	.@size2 = getarraysize(getVariable(getarg(0),getarg(2,strnpcinfo(3))));
	//debugmes ".@size2 = "+.@size2;
	if(.@size==.@size2) return 0;
	return getarg(1);
}

//===================================
//=	arrdel("<arrayname>",<index>,{<"owner">})
//= delete index from array
//= owner will be calling npc if omitted
//===================================
function	script	arrdel	{
	.@size = getarraysize(getVariable(getarg(0),getarg(2,strnpcinfo(3))));
	deletearray getVariable(getarg(0)+"["+getarg(1)+"]",getarg(2,strnpcinfo(3))),1;
/*	for(.@x=0;.@x < .@size;.@x++){
		if( getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3))) == getarg(1) ){
			deletearray getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3))),1;
			//debugmes getarg(1)+" delete from "+getarg(0);
			return getarg(1);
		}
	}
*/
	return 0;
}

//===================================
// arrhas("<arrayname>",<value>,{<"owner">,<notsensitive>})
//= check if value in array
//= return 1 if in else return 0
//===================================
function	script	arrhas	{
	.@size = getarraysize(getVariable(getarg(0),getarg(2,strnpcinfo(3))));
	for(.@x=0;.@x < .@size;.@x++){
		//dispbottom "Compare "+getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3)))+" == "+getarg(1);
		if(getarg(3,0)){
			if( strtolower(getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3)))) == strtolower(getarg(1)) ) return 1;
		}else{
			if( getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3))) == getarg(1) ) return 1;
		}
		
	}
	return 0;
}

//===================================
// arrfind("<arrayname>",<value>,{<"owner">,<notsensitive>})
//= return first found value index in array
//= return -1 if not found
//===================================
function	script	arrfind	{
	.@size = getarraysize(getVariable(getarg(0),getarg(2,strnpcinfo(3))));
	for(.@x=0;.@x < .@size;.@x++){
		//dispbottom "Compare "+getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3)))+" == "+getarg(1);
		if(getarg(3,0)){
			if( strtolower(getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3)))) == strtolower(getarg(1)) ) return .@x;
		}else{
			if( getVariable(getarg(0)+"["+.@x+"]",getarg(2,strnpcinfo(3))) == getarg(1) ) return .@x;
		}
	}
	return -1;
}

//===================================
// arrselect("<arrayname>",{<"label">,"<owner>"})
//= return selected array value after selection
//= label add before selection	
//= owner will be calling npc if omitted
//===================================
function	script	arrselect	{
	.@blist$ = "25003";
	.@arrName$ = getarg(0);
	.@owner$ = getarg(2,strnpcinfo(3));
	.@label$ = getarg(1,"");
	.@size = getarraysize(getVariable(.@arrName$,.@owner$));
	.@m$ = "";
	for(.@x=0;.@x<.@size;.@x++){
		.@m$ = .@m$+.@label$+getVariable(.@arrName$+"["+.@x+"]",.@owner$)+":";
	}
	return getVariable(.@arrName$+"["+(select(.@m$)-1)+"]",.@owner$);
}

//==============================
//= UpperFirst("<string>")
//= return string with first string capital
//==============================
function	script	UpperFirst	{
	.@s$ = getarg(0);
	return Strtoupper(charat(.@s$,0)) + delchar(.@s$,0);
	//return setchar(.@s$, charat(.@s$,0), 0);
}

//group_chk("variable",valuetocompare{,mode})
function	script	group_chk	{
	.@mode = getarg(2,0);
	.@count = 0;
	.@num = 0;
	if(!.@mode){
		getpartymember getcharid(1),1;
		.@num = $@partymembercount;
		for(.@x=0;.@x<.@num;.@x++){
			if(getvar(getd(getarg(0)),$@partymembercid[.@x]) >= getarg(1)) .@count++;
		}
	}else{
		getguildmember getcharid(2),1;
		.@num = $@guildmembercount;
		for(.@x=0;.@x<.@num;.@x++){
			if(getvar(getd(getarg(0)),$@guildmembercid[.@x]) >= getarg(1)) .@count++;
		}
	}
	if(.@count >= .@num) return 1;
	return 0;
}

//===================================
//=	answer_chk(<"str1:str2:...">/<"str1|str2">)
//=	delimeter:
//=	":" only need to meet any of these
//=	"|" will need to meet all of these inside (no need in order)
//= return 1 if condition meet
//= return 0 if condition not meet
//===================================
function	script	answer_chk	{
	deletearray @T$,getarraysize(@T$);
	explode(@T$,getarg(0),":");
	@size = getarraysize(@T$);
	if(!compare(getarg(0),"|")){
		input @in$;
		for(.@i=0;.@i<@size;.@i++){
			if(strtolower(@in$)==@T$[.@i]) return 1;
		}
	}else{
		.@prefix$ = ".list";
		.@char$ = strcharinfo(0)+"$";	// result will be .answerlist+charname+$ = .answerlistGM01$
		.@var$ = .@prefix$+.@char$;
		deletearray @T$,getarraysize(@T$);
		explode(@T$,getarg(0),"|");
		@size = getarraysize(@T$);
		@count = 0;
		for(.@i=0;.@i<@size;.@i++){
			arradd(.@var$,@T$[.@i]);
		}
		for(.@i=0;.@i<@size;.@i++){
			input @in$;
			if(arrhas(.@var$,@in$,strnpcinfo(3),1)){
				@count++;
				mes "["+@count+"/"+@size+"] "+UpperFirst(@in$);
				arrdel(.@var$,arrfind(.@var$,@in$,strnpcinfo(3),1));
			}else{
				return 0;
			}
		}
		if(@count >= @size) return 1;
	}
	return 0;
}

// sortstringarray("<arrname>"{,<mode>})
function	script	sortstringarray	{
	.@varname$ = getarg(0);
	.@mode = getarg(1,0);		// 0 ascending , 1 descending
	copyarray .@temparr$[0],getVariable(.@varname$+"[0]"),getarraysize(getVariable(.@varname$));
	setarray .@T$,"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z";
	for( .@x=(!.@mode?0:getarraysize(.@T$)-1) ; (!.@mode?.@x<getarraysize(.@T$):.@x>=0) ; .@x+=(!.@mode?1:-1) ){
		for(.@y=0;.@y<getarraysize(.@temparr$);.@y++){
			if( strtoupper(charat(.@temparr$[.@y],0)) == strtoupper(.@T$[.@x]) ){
				.@SortedString$[getarraysize(.@SortedString$)] = .@temparr$[.@y];
				deletearray .@temparr$[.@y],1;
				.@y--;
			}
		}
		if(!getarraysize(.@temparr$)) break;	// stop sorting if no more item left
	}
	for(.@x=0;.@x<getarraysize(.@SortedString$);.@x++)
		setVariable(.@varname$+"["+.@x+"]",.@SortedString$[.@x]);
	return;
}

function	script	BubbleComb	{	
// BubbleComb(arr[,type]); Sorts the given array (type 1 = ascending (default); 2 = descending)
	set .@Type,(getarg(1,1) == 2 ? -1 : 1);
	set .@Gap,set(.@Size,getarraysize(getarg(0)));
	do {
		if(.@Gap>1) set .@Gap,(.@Gap*100)/140;
		set .@Swap,0;
		for(set .@i,0; (.@i+.@Gap)<.@Size; set .@i,.@i+1){
			sleep( (.@i%1024==0)*20 );
			if(getelementofarray(getarg(0),.@i)*.@Type > getelementofarray(getarg(0),.@i+.@Gap)*.@Type){
				set .@tmp,getelementofarray(getarg(0),.@i);
				set getelementofarray(getarg(0),.@i),getelementofarray(getarg(0),.@i+.@Gap);
				set getelementofarray(getarg(0),.@i+.@Gap),.@tmp;
				set .@Swap,1;
			}
		}
	} while(.@Swap || .@Gap>1);
	return;
}

//=========================================
//= getpercent(<currentval>,<maxval>)
//= return percent rate
//=========================================
function	script	getpercent	{
	.@current = getarg(0);
	.@max = getarg(1);
	if(!.@current) return 0;
	return .@current*100/.@max;
}

function	script	getpercentbar	{
	.@current = getarg(0,0);
	.@max = getarg(1,100);
	.@color1$ = getarg(2,"GREEN");
	.@color2$ = getarg(3,"RED");
	.@char$ = "l";
	.@dot = 4;
	if(.@current>.@max) .@current = .@max;
	if(!.@current || .@max<0){
		for(.@x=0;.@x<=6*.@dot;.@x++){
			set .@t1$,.@t1$+.@char$;
		}
		return callfunc("CStr",.@t1$,.@color2$)+" [ 0% ]";
	}
	.@cal = .@current*100/.@max;
	for(.@x=0;.@x<.@cal/.@dot;.@x++){
		set .@t1$,.@t1$+.@char$;
		.@c++;
	}
	for(.@x=0;.@x<((100/.@dot)-.@c);.@x++){
		set .@t2$,.@t2$+.@char$;
	}
	return callfunc("CStr",.@t1$,.@color1$)+callfunc("CStr",.@t2$,.@color2$)+" [ "+callfunc("CStr",.@cal)+"% ]";
}

//=========================================
//= getRemain(<sec>,{<langtype>})
//= return remaining time string
//=========================================
function	script	getRemain	{
	.@timeL = getarg(0);
	.@lang = getarg(1,0);
	setarray .@day$," Day "," “ú ";
	setarray .@hour$," Hour "," Žž ";
	setarray .@min$," Min "," •ª ";
	setarray .@sec$," Sec "," •b ";
	if(((((.@timeL)/60)/60)/24)>0){
		return (((((.@timeL)/60)/60)/24)>0?((((.@timeL)/60)/60)/24)+.@day$[.@lang]:"");
	}
	//.@outstr$ = .@outstr$+(((((.@timeL)/60)/60)/24)>0?((((.@timeL)/60)/60)/24)+" Day ":"");
	.@outstr$ = .@outstr$+((((.@timeL)/60)/60)>0?(((.@timeL)/60)/60)+.@hour$[.@lang]:"");
	.@outstr$ = .@outstr$+((((.@timeL)/60)%60)>0?(((.@timeL)/60)%60)+.@min$[.@lang]:"");
	.@outstr$ = .@outstr$+(((.@timeL)%60)>0?((.@timeL)%60)+.@sec$[.@lang]:"");
	return .@outstr$;
}

function	script	showscript2	{
	showscript getarg(0),getcharid(3);
	return;
}

//=========================================
//= npcmes(<"npcname">,"mes1:mes2|mes1:mes2")
//= npcmes("Kafra","Hello adventurer, how are you?:This is my 2rd message.|Hmm... ok..:See you soon.|Bye.")
//= after the delimiter | will auto next
//=========================================
function	script	npcmes	{
	.@n$ = getarg(0);
	deletearray .@T$,getarraysize(.@T$);
	explode(.@T$,getarg(1),"|");
	for(.@x=0;.@x<getarraysize(.@T$);.@x++){
		mes .@n$;
		deletearray .@TT$,getarraysize(.@TT$);
		explode(.@TT$,.@T$[.@x],":");
		for(.@y=0;.@y<getarraysize(.@TT$);.@y++){
			mes .@TT$[.@y];
		}
		if(.@x+1 < getarraysize(.@T$)) next;
	}
	return;
}

//=========================================
//= Navi(<"name">,<"mapname">{,< x >,< y >})
//= return string with navigation added
//=========================================
function	script	Navi	{
	.@name$ = getarg(0);
	.@map$ = getarg(1);
	.@x = getarg(2,0);
	.@y = getarg(3,0);
	return "<NAVI>"+.@name$+"<INFO>"+.@map$+","+.@x+","+.@y+",0,000,1</INFO></NAVI>";
}

//=========================================
//= Url(<"url">{,<"Url Name">})
//= return url link which open in ingame browser
//=========================================
function	script	Url	{
	return "<URL>"+getarg(1,getarg(0))+"<INFO>"+getarg(0)+",300,300</INFO></URL>";
}

//=========================================
//= itembreak(<itemid>,<rate>)
//= delete worn out item with rate
//=========================================
function	script	itembreak	{
	if(rand(1,10000)<=getarg(1)){
		showscript getitemname(getarg(0))+" worn out!";
		delitem getarg(0),1;
	}
	return;
}

//=========================================
//= itemname(<itemid>)
//= return item string using internal client function
//=========================================
function	script	itemname	{
	.@id = getarg(0);
	return "^nItemID^"+.@id;
}

//=========================================
//= Itemlink(<itemid>)
//= return item string with itemlink added
//=========================================
function	script	Itemlink	{
	.@id = getarg(0);
	.@showslot = getarg(1,0);
	.@slot = getitemslots(.@id);
	return "<ITEM>"+(.@slot&&.@showslot?getitemname(.@id)+"["+.@slot+"]":getitemname(.@id))+"<INFO>"+.@id+"</INFO></ITEM>";
}

function	script	itemtype	{
	.@id = getarg(0);
	setarray .ItemType$,"Healing","","Usable","Etc","Equipment","Weapon","Card","Pet Egg","Pet Equipment","","Ammunition","Consumable","Shadow Equipment","","","","","","Box";
	return .ItemType$[getiteminfo(.@id,2)];
}

function	script	itemcheck	{
	.@iteminfo$ = getarg(0);
	.@mode = getarg(1,0);
	.@mul = getarg(2,1);
	if(.@iteminfo$ == "") return 2;
	explode(.@T$,.@iteminfo$,"|");
	if(!.@mode){
		mes "Item Requirement:";
		.@bool = 1;
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@id = atoi(.@TT$[0]);
			.@amt = atoi(.@TT$[1])*.@mul;
			if(countitem(.@id) < .@amt){
				mes " > "+Itemlink(.@id,1)+" ["+CStr(countitem(.@id),"red")+"/"+.@amt+"]";
				.@bool = 0;
			}else{
				mes " > "+Itemlink(.@id,1)+" ["+CStr(countitem(.@id),(countitem(.@id)?"green":"red"))+"/"+(.@amt==0?"-":.@amt)+"]";
				if(countitem(.@id)==0) .@bool = 0;
			}
		}
		return .@bool;
	}else{
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@id = atoi(.@TT$[0]);
			.@amt = atoi(.@TT$[1])*.@mul;
			if(.@amt>0) delitem .@id,.@amt;
		}
		return 1;
	}
	return 0;
}

function	script	varcheck	{
	.@iteminfo$ = getarg(0);
	.@mode = getarg(1,0);
	if(.@iteminfo$ == "") return 2;
	explode(.@T$,.@iteminfo$,"|");
	if(!.@mode){
		mes "Variable Requirement:";
		.@bool = 1;
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@var$ = .@TT$[0];
			.@amt = atoi(.@TT$[1]);
			if(getd(.@var$) < .@amt){
				mes " > "+.@var$+" ["+CStr(getd(.@var$),"green")+"/"+.@amt+"]";
				.@bool = 0;
			}else{
				mes " > "+.@var$+" ["+CStr(getd(.@var$),"red")+"/"+.@amt+"]";
			}
		}
		return .@bool;
	}else{
		for(.@x=0;.@x<getarraysize(.@T$);.@x++){
			explode(.@TT$,.@T$[.@x],":");
			.@var$ = .@TT$[0];
			.@amt = atoi(.@TT$[1]);
			set getd(.@var$),getd(.@var$)-.@amt;
		}
		return 1;
	}
	return 0;
}

//= Below this will add a new custom inventory system ===============================
//= This system are useful for someone that hope npc can have inventory
//===================================================================================

//=========================================
//= Yuchinin Custom Setup Npc
//=========================================
-	script	Yuchinin_Custom_Setup	-1,{
OnInit:
.install_custom_db = 1;

.@sql$ = "CREATE TABLE IF NOT EXISTS `custom_inventory` (`itemid` int(11) NOT NULL,`amount` int(11) NOT NULL DEFAULT '0',`owner` varchar(25) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8";
.@sql2$ = "CREATE TABLE IF NOT EXISTS `delay_item_db` (`charid` int(10) unsigned NOT NULL,`npcid` varchar(45) NOT NULL,`itemid` int(10) unsigned NOT NULL DEFAULT '0',`amount` int(10) unsigned NOT NULL DEFAULT '0',`timestamp` int(10) unsigned NOT NULL DEFAULT '0') ENGINE=InnoDB DEFAULT CHARSET=utf8;";
if(.install_custom_db){
	query_sql(.@sql$);
	debugmes "table name [ custom_inventory ] installed!";
	query_sql(.@sql2$);
	debugmes "table name [ delay_item_db ] installed!";
}
end;
}

function	script	getdelayitemdata	{
	.@sql$ = "select "+getarg(0)+" from delay_item_db where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	.@size = query_sql(.@sql$,.@val);
	if(.@size>0) return .@val;
	return -1;
}

function	script	setdelayitemdata	{
	.@sql$ = "update delay_item_db set "+getarg(0)+" = "+getarg(1)+" where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	//dispbottom .@sql$;
	query_sql(.@sql$);
	return;
}

function	script	adddelayitemdata	{
	.@sql$ = "replace into delay_item_db set charid = "+getcharid(0)+", npcid = '"+strnpcinfo(3)+"'";
	query_sql(.@sql$);
	return;
}

function	script	deldelayitemdata	{
	.@sql$ = "delete from delay_item_db where charid = "+getcharid(0)+" AND npcid = '"+strnpcinfo(3)+"'";
	query_sql(.@sql$);
	return;
}

function	script	countdelayitemdata	{
	.@sql$ = "select timestamp from delay_item_db where npcid = '"+strnpcinfo(3)+"' AND timestamp > "+gettimetick(2);
	.@size = query_sql(.@sql$,.@val);
	if(.@size>0) return .@size;
	return 0;
}

//===================================
//=	invcount("<owner>")
//= return inventory count
//===================================
function	script	invcount	{
	.@owner$ = getarg(0,strnpcinfo(3));
	if(.@owner$=="ALL") query_sql("SELECT COUNT(*) as count FROM custom_inventory",.@count);
	else query_sql("SELECT COUNT(*) as count FROM custom_inventory where owner = '"+.@owner$+"'",.@count);
	return .@count;
}

//===================================
//=	invcountitem(<itemid>,"<owner>")
//= return item count in inventory
//===================================
function	script	invcountitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	if(.@owner$=="ALL") query_sql("SELECT sum as amount FROM custom_inventory where itemid = "+.@itemid,.@amount);
	else query_sql("SELECT amount FROM custom_inventory where itemid = "+.@itemid+" AND owner = '"+.@owner$+"'",.@amount);
	return .@amount;
}

//===================================
//=	invselect("<owner>","<blacklistid>","<label>")
//= add label before selection
//= return itemid after selection
//===================================
function	script	invselect	{
	.@blist$ = "25003";
	.@owner$ = getarg(0,strnpcinfo(3));
	.@blacklist$ = getarg(1,"");
	.@label$ = getarg(2,"");
	if(.@owner$=="ALL") .@sql = query_sql("SELECT itemid,amount,owner FROM custom_inventory",.@itemid,.@amount,.@owner$);
	else .@sql = query_sql("SELECT itemid,amount,owner FROM custom_inventory where instr('"+.@blacklist$+.@blist$+"',itemid) = 0 AND owner = '"+.@owner$+"'",.@itemid,.@amount,.@owner$);
	.@m$ = "";
	for(.@x=0;.@x<.@sql;.@x++){
		.@m$ = .@m$+.@label$+(.@owner$=="ALL"?.@owner$[.@x]+" ":"")+"["+.@amount[.@x]+"]"+getitemname(.@itemid[.@x])+":";
	}
	return .@itemid[select(.@m$)-1];
}

//===================================
//=	invgetitem(<itemid>,"<owner>",{<amount>})
//= return itemid if success
//= return 0 if fail
//===================================
function	script	invgetitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	.@amount = getarg(2,1);
	.@count = callfunc("invcountitem",.@itemid,.@owner$);
	if(getitemname(.@itemid)!="null"){
		if(.@count<=0) query_sql("INSERT INTO `custom_inventory` VALUES ("+.@itemid+","+.@amount+", '"+.@owner$+"')");
		else query_sql("UPDATE `custom_inventory` set amount = amount + "+.@amount+" where itemid = "+.@itemid+" AND owner = '"+.@owner$+"'");
	}else{
		debugmes "invgetitem id "+.@itemid+" is not a valid item";
	}
	.@count2 = callfunc("invcountitem",.@itemid,.@owner$);
	//debugmes "get .@count = "+.@count+" .@count2 = "+.@count2+" owner$ = "+.@owner$;
	if(.@count == .@count2){
		debugmes "invgetitem Fail to get "+.@amount+" x "+getitemname(.@itemid)+" ["+.@owner$+"]";
		return 0;
	}
	return .@itemid;
}

//===================================
//=	invhasitem(<itemid>,"<owner>")
//= return itemid if have item
//= return 0 if don't have item
//===================================
function	script	invhasitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	if(.@owner$=="ALL") .@sql = query_sql("SELECT itemid FROM custom_inventory where itemid = "+.@itemid+";",.@item);
	else .@sql = query_sql("SELECT itemid FROM custom_inventory where owner = '"+.@owner$+"' AND itemid = "+.@itemid+";",.@item);
	if(.@sql>0) return .@itemid;
	return 0;
}

//===================================
//=	invdelitem(<itemid>,"<owner>",{<amount>})
//= return itemid if success
//= return 0 if fail
//===================================
function	script	invdelitem	{
	.@itemid = getarg(0);
	.@owner$ = getarg(1,strnpcinfo(3));
	.@amount = getarg(2,1);
	.@count = callfunc("invcountitem",.@itemid,.@owner$);
	if(getitemname(.@itemid)!="null") {
		query_sql("UPDATE custom_inventory set amount = amount - "+.@amount+" where owner = '"+.@owner$+"' AND itemid = "+.@itemid+";");
		query_sql("DELETE FROM custom_inventory where amount <= 0 AND owner = '"+.@owner$+"' AND itemid = "+.@itemid+";");
	}else{
		debugmes "invdelitem id "+.@itemid+" is not a valid item";
	}
	.@count2 = callfunc("invcountitem",.@itemid,.@owner$);
	//debugmes "del .@count = "+.@count+" .@count2 = "+.@count2+" owner$ = "+.@owner$;
	if(.@count == .@count2){
		debugmes "invdelitem Fail to del "+.@amount+" x "+getitemname(.@itemid)+" ["+.@owner$+"]";
		return 0;
	}
	return .@itemid;
}

//===================================
//=	invclear("<owner>")
//= clear all inventory
//===================================
function	script	invclear	{
	.@owner$ = getarg(0,strnpcinfo(3));
	.@count = callfunc("invcount",.@owner$);
	if(.@owner$=="ALL") query_sql("delete FROM custom_inventory");
	else query_sql("delete FROM custom_inventory where owner = '"+.@owner$+"'");
	.@count2 = callfunc("invcount",.@owner$);
	if(.@count==.@count2){
		return 0;
	}
	return 1;
}

/*
e_gasp   	0 = !
e_what  	1 = ?
e_ho    	2 = ho
e_lv    	3 = lv
e_swt   	4 = swt
e_ic    	5 = ic
e_an    	6 = an
e_ag    	7 = ag
e_cash  	8 = $
e_dots  	9 = ...
e_scissors	10 = gawi
e_rock  	11 = bawi
e_paper  	12 = bo
e_korea  	13 = flg1
e_lv2   	14 = lv2
e_thx   	15 = thx
e_wah   	16 = wah
e_sry   	17 = sry
e_heh   	18 = heh
e_swt2  	19 = swt2
e_hmm   	20 = hmm
e_no1   	21 = no1
e_no    	22 = ??
e_omg   	23 = omg
e_oh    	24 = oh
e_X     	25	= x
e_hlp   	26 = hlp
e_go    	27 = go
e_sob    	28 = sob
e_gg    	29 = gg
e_kis   	30 = kis
e_kis2   	31 = kis2
e_pif   	32 = pif
e_ok    	33 = ok
e_mute  	34 = ""
e_indonesia	35 = flg2
e_bzz   	36 = bzz
e_rice   	37 = rice
e_awsm   	38 = awsm
e_meh   	39 = meh
e_shy   	40 = shy
e_pat   	41 = pat
e_mp    	42 = mp
e_slur   	43 = slur
e_com   	44 = com
e_yawn   	45 = yawn
e_grat   	46 = grat
e_hp    	47 = hp
e_philippines	48 = flg3
e_malaysia	49 = flg4
e_singapore	50 = flg5
e_brazil	51 = flg6
e_flash  	52 = fsh
e_spin  	53 = spin
e_sigh  	54 = sigh
e_dum   	55 = dum
e_loud  	56 = crwd
e_otl   	57 = otl
e_dice1 	58 = dice1
e_dice2  	59 = dice2
e_dice3  	60 = dice3
e_dice4 	61 = dice4
e_dice5 	62 = dice5
e_dice6 	63 = dice6
e_india 	64 = flg7
e_luv   	65 = luv
e_russia	66 = flg8
e_virgin	67 = flg9
e_mobile	68 = mobile
e_mail   	69 = mail
e_chinese	70 = flg10
e_antenna1	71 = antenna1
e_antenna2	72 = antenna2
e_antenna3	73 = antenna3
e_hum   	74 = hum
e_abs   	75 = abs
e_oops   	76 = oops
e_spit   	77 = spit
e_ene   	78 = ene
e_panic  	79 = panic
e_whisp 	80 = whisp
*/
